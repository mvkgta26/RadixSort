#ifndef __CUDACC__
	#define __CUDACC__
#endif

#include <cuda_runtime.h>
#include "device_launch_parameters.h"
#include <cuda.h>
#include "device_functions.h"
#include <cuda_runtime_api.h>
#include <stdio.h>
#include <windows.h>
#include < time.h >
//#include <iostream>

#include "scan.h"
#include "kernel.h"

//Takes arr[] as input and produces compact_0[] for bit-0, and compact_1[] for bit-1, in bit-poisiton 'i'
__global__ void compacter(unsigned int* arr, unsigned int* compact_0, unsigned int* compact_1, int i)
{
	int idx = threadIdx.x;

	unsigned int num = arr[idx];

	//Predicate: Check if bit-i is 1 or 0
	compact_0[idx] = !( (num >> i) & 1);
	compact_1[idx] = ( (num >> i) & 1);
}


//Takes arr[], scatter addresses (scan of compact_0 and scan of compact_1), compact[] as input, and produces sorted array for the respective bit, in arr[] itself
	//arr[] = Input  array to be sorted according to respective bit
	//scan_0[] = Scan array for compact of bit-0 in respective position
	//scan_1[] = Scan array for compact of bit-1 in respective position
	//compact_0[] = Compact array for bit-0 in respective position for arr[]
	//n = Size of arr[]
	//temp_out[] is temporary array used to store sorted array before copying back to arr[]
__global__ void scatter_sort(unsigned int* arr, unsigned int* scan_0, unsigned int* scan_1, 
								unsigned int* compact_0, int n, unsigned int* temp_out)
{
	int idx = threadIdx.x;

	int num_of_0 = scan_0[n];    //Total number of elements with 0-bit in respective position
	int pos;

	if (compact_0[idx] == 1)    //If element arr[idx] has bit-0 in current position
	{
		pos = scan_0[idx];    //The index position in output array where the arr[idx] is supposed to go
		temp_out[pos] = arr[idx];
	}

	else if (compact_0[idx] == 0)  //If element arr[idx] has bit-1 in current position
	{
		pos = scan_1[idx] + num_of_0;    //num_of_0 : Offset
		temp_out[pos] = arr[idx];
	}

	__syncthreads;   //Barrier


	//Copy from temp_out[] back to arr[]
	arr[idx] = temp_out[idx];

}


//Calculate scan for bit-1: 
	//scan_1[] is scan array for bit-1 that is to be calculated
	//scan_0[] is scan array for bit-0, given as input
	//n = size of array that is to be sorted
__global__ void scan_1_calculator(unsigned int* scan_1, unsigned int* scan_0, int n)
{
	int idx = threadIdx.x;
	int num_of_0_elements = scan_0[n];               //Number of elements with 0 in respective bit position
	int num_of_1_elements = n - num_of_0_elements;   //Number of elements with 1 in respective bit position = Total number of elements - Number of elements with 0 in respective bit position

	//Last element (at index n) of scan_1[] = num_of_1_elements 
	if ( idx == (n) )
	{
		scan_1[idx] = num_of_1_elements;
	}


	else
	{
		//Formula to calculate scan_1[i] using scan_1[i+1] and compact_1[]. 
		//Logic:
			//scan_1[i] = Total Number of 1-elements (elements with 1 at respective bit-position), till index i- in arr[]
		    //  i  -->index = Number of elements in arr[] before current element
			// scan_0[i]  --> Number of 0-elements till index-i in arr[]
		scan_1[idx] = idx - scan_0[idx];   
	}

}



void radix_sort()
{

	//---------------------------------Create input arr[] and h_compact[] --------------------------------------------------------------------	

	//unsigned int h_arr[] = { 1989, 1124, 9701, 2900, 5241, 6702, 1784, 1096, 3382, 863, 8966, 2830, 2043, 9889, 3414, 2810, 644, 1420, 1065, 8597, 4419, 1388, 8796, 6139, 1158, 7689, 4114, 1865, 8485, 9190, 564, 5409, 9016, 3515, 2993, 6536, 7524, 2982, 9953, 3228, 1678, 2770, 7072, 3091, 9815, 7426, 363, 5139, 7481, 6183, 3392, 5808, 2407, 5425, 3353, 4484, 1825, 6621, 3046, 2710, 1533, 118, 7109, 2917, 4677, 641, 4802, 9366, 5029, 59, 9204, 9173, 5875, 7417, 9070, 2929, 1529, 6985, 5923, 9271, 1907, 8870, 7774, 3496, 2258, 5167, 7164, 9915, 2854, 1089, 1275, 1258, 7372, 6088, 375, 8333, 840, 3010, 5606, 2534, 138, 7266, 1339, 1714, 3615, 9601, 9817, 6208, 9483, 5269, 7835, 4681, 772, 7000, 6922, 6833, 4163, 6246, 3913, 5617, 7160, 2678, 8284, 8454, 7671, 8963, 4080, 4745, 6173, 8950, 4646, 1182, 4264, 3858, 2221, 270, 7341, 8382, 2889, 5722, 3947, 784, 4280, 439, 5331, 6080, 7296, 4075, 8380, 8049 };
	//unsigned int h_arr[] = { 26338, 1102, 43406, 62440, 7116, 75423, 95442, 31454, 43177, 27829, 37527, 20088, 48786, 33484, 91084, 98038, 93852, 64998, 84009, 91983, 12691, 8128, 90209, 64050, 64526, 63539, 31716, 52617, 55245, 69338, 96600, 62877, 9070, 89736, 64799, 45587, 22108, 78332, 86473, 6608, 39686, 67631, 90273, 41757, 57024, 65715, 6247, 35982, 49869, 83823, 50126, 83367, 58983, 78590, 50726, 61549, 96979, 9315, 99939, 92868, 42634, 72012, 75395, 66760, 97571, 67335, 50690, 55839, 7193, 68868, 52778, 50767, 38817, 73182, 73173, 18570, 59518, 75198, 43944, 81905, 17130, 30499, 62531, 67788, 10212, 93307, 33485, 35421, 41800, 91439, 7128, 5244, 4857, 19666, 55995, 93197, 16521, 70814, 65956, 29551, 41088, 90651, 8364, 81397, 65599, 21928, 79453, 43220, 30210, 89518, 46937, 39088, 3064, 8272, 95080, 72370, 38519, 80624, 73855, 14338, 26999, 797, 7389, 22675, 29441, 91215, 57751, 20691, 73766, 19449, 65664, 4911, 51829, 52694, 59465, 18815, 47909, 6960, 71232, 31887, 33836, 75839, 77099, 72696, 66743, 23003, 67416, 79256, 92027, 14854, 67547, 66948, 73557, 81593, 40373, 36769, 91653, 55675, 91273, 82840, 12390, 55618, 98120, 60072, 10352, 26671, 53834, 67112, 11591, 66281, 4508, 74787, 76274, 50136, 87370, 33150, 30572, 77426, 22738, 93988, 76158, 88211, 56058, 61264, 49590, 64482, 76270, 58166, 83076, 3572, 53961, 96103, 69219, 56519, 39247, 47900, 96419, 20127, 21434, 83026, 53972, 12275, 41420, 14470, 83492, 98815, 11219, 28147, 40874, 75086, 58471, 14116, 12447, 59360, 86793, 53957, 74870, 56028, 78651, 78761, 68152, 31585, 86419, 73739, 13907, 47057, 52096, 17777, 46550, 14465, 97001, 75372, 82870, 2510, 54067, 53592, 49157, 50366, 72633, 69869, 6182, 91356, 76672, 13479, 20844, 35748, 16099, 52512, 89438, 59887, 65339, 85400, 64340, 34066, 77991, 38365, 79942, 7545, 94624, 3357, 87348, 79218, 70170, 80566, 9464, 64659, 95658, 58290, 44600, 13764, 83274, 46833, 13879, 72497, 61917, 16609, 77559, 58483, 24873, 69414, 11725, 52316, 53275, 13306, 35063, 87894, 5532, 53202, 24268, 58043, 33283, 6492, 45431, 30406, 32716, 88618, 33055, 78184, 98307, 6890, 8994, 89487, 11234, 52622, 64764, 11958, 44815, 1532, 79736, 47961, 14542, 77658, 75199, 45576, 19542, 7035, 20812, 91288, 51135, 4249, 98847, 6941, 38347, 64487, 15925, 99375, 8921, 90455, 17026, 97407, 29745, 56171, 32655, 30296, 25287, 92752, 33062, 54188, 59874, 18971, 80723, 14297, 57746, 85341, 15519, 2459, 10977, 97487, 88749, 88970, 57457, 89542, 45360, 455, 65658, 10186, 96217, 87608, 45218, 90238, 76122, 54096, 77985, 97251, 8675, 9146, 38822, 80023, 87709, 7900, 80506, 24446, 51014, 14603, 94082, 43508, 43274, 67228, 56128, 37014, 43127, 43953, 96690, 35271, 67673, 71158, 50788, 69814, 76142, 791, 86797, 15482, 98654, 52733, 31128, 64146, 96229, 11191, 23915, 99656, 78797, 15635, 9645, 48483, 2935, 50237, 14411, 8588, 61111, 84174, 17764, 11618, 94105, 21335, 81908, 82632, 72680, 56202, 83381, 39008, 80899, 11145, 72512, 74094, 12690, 1350, 20388, 46408, 69910, 79823, 90323, 22544, 99050, 10961, 5284, 18371, 45704, 86015, 35965, 98364, 62855, 51699, 8593, 95676, 85731, 66224, 19520, 49572, 26118, 64236, 86854, 68097, 28618, 30063, 73433, 37923, 96022, 9800, 4261, 52449, 32161, 35946, 82185, 70005, 57610, 48663, 3915, 88572, 93349, 1709, 89097, 72236, 62070, 64663, 25783, 54343, 376, 57853, 6775, 81468, 32931, 44625, 91909, 52921, 84552, 94976, 65099, 37356, 86361, 34262, 571, 32338, 22506, 3641, 79365, 17411, 4160, 47729, 21059, 55742, 69135, 25617, 81408, 45984, 76631, 11955, 57728, 72173, 51879, 76821, 2146, 7880, 21508, 94189, 19944, 90717, 42518, 77249, 66967, 54725, 30968, 39205, 35117, 86598, 60500, 8489, 72419, 62481, 72656, 76243, 65476, 16709, 13908, 20416, 72724, 5089, 8265, 40097, 79298, 40171, 10218, 67885, 62477, 3068, 41719, 62229, 60152, 78163, 59021, 73703, 94992, 14615, 50868, 41622, 59259, 41659, 86480, 85254, 19229, 13745, 87784, 98089, 99842, 10269, 27592, 89481, 68467, 56126, 32884, 92184, 17521, 85446, 58156, 80504, 92966, 73456, 11176, 26435, 72496, 32129, 49957, 8609, 30759, 28815, 84018, 81335, 13435, 68014, 78931, 4503, 7175, 25168, 60915, 74655, 80498, 31761, 82006, 14226, 30640, 75321 };


	//int h_arr[500] = {};
	//int h_arr[400] = {};
	//int h_arr[2000] = { 693, 1100, 296, 1207, 80, 1619, 312, 1398, 583, 800, 56, 923, 209, 1504, 1204, 197, 1258, 661, 1301, 1225, 533, 593, 885, 1610, 1375, 1862, 486, 1738, 1268, 1296, 1519, 569, 1584, 628, 165, 977, 1190, 80, 467, 1362, 1426, 420, 1321, 1267, 1799, 695, 1322, 1053, 112, 1982, 1685, 1360, 1007, 1968, 1630, 9, 1064, 466, 1795, 1883, 508, 1933, 422, 1664, 1439, 1879, 1725, 254, 1196, 1234, 1669, 226, 351, 304, 739, 1421, 1554, 1381, 414, 150, 437, 1932, 969, 1298, 1641, 1503, 1577, 162, 1144, 1785, 1192, 766, 1342, 1331, 146, 1699, 712, 476, 777, 128, 1067, 927, 905, 638, 1531, 1586, 1858, 720, 1748, 1333, 1542, 862, 80, 1932, 902, 243, 1522, 426, 1127, 898, 1131, 793, 1490, 1568, 700, 510, 0, 976, 1325, 1080, 1239, 947, 1721, 1356, 86, 1777, 319, 479, 490, 93, 1866, 1122, 735, 1557, 537, 1506, 1470, 1452, 136, 1813, 1835, 1268, 1953, 81, 1523, 656, 1441, 378, 1720, 987, 1247, 1961, 191, 181, 236, 1109, 1054, 551, 1245, 961, 1255, 1120, 1938, 674, 1912, 686, 277, 348, 567, 1856, 1027, 1872, 1238, 764, 1654, 405, 581, 1872, 639, 781, 490, 922, 830, 1742, 1344, 1896, 377, 1192, 353, 367, 1334, 1218, 1851, 1123, 238, 122, 1138, 493, 528, 695, 1107, 1940, 1927, 1683, 95, 412, 677, 147, 269, 967, 1561, 1529, 1405, 1399, 1717, 201, 1349, 1762, 848, 378, 1181, 1441, 306, 1486, 1356, 766, 1098, 119, 1126, 1224, 497, 923, 294, 612, 1516, 346, 378, 1298, 1849, 11, 1449, 100, 212, 1734, 362, 505, 1361, 424, 909, 1491, 579, 1018, 151, 492, 550, 1238, 76, 758, 40, 823, 1925, 1116, 932, 1550, 1517, 1273, 1400, 278, 600, 383, 512, 455, 363, 1165, 619, 1141, 1735, 770, 1349, 85, 495, 484, 1605, 1657, 1285, 407, 1013, 1731, 868, 748, 560, 1888, 27, 499, 522, 210, 1462, 854, 522, 968, 1555, 234, 1810, 1524, 751, 1033, 1676, 1422, 133, 1583, 1752, 770, 634, 1230, 1916, 47, 1283, 579, 939, 337, 730, 573, 596, 1736, 1771, 219, 1722, 1641, 1382, 1567, 1667, 1161, 1387, 1934, 648, 584, 932, 281, 872, 48, 1046, 913, 88, 1510, 829, 1429, 191, 1232, 1735, 452, 1155, 1133, 1931, 967, 1597, 494, 40, 1759, 373, 1275, 341, 215, 1838, 1504, 1206, 958, 1483, 357, 1667, 79, 485, 93, 810, 302, 292, 1785, 1296, 349, 254, 679, 1344, 188, 1983, 1500, 708, 1039, 237, 428, 1457, 241, 701, 85, 1618, 1884, 1701, 607, 943, 1238, 3, 820, 1030, 1379, 826, 1473, 1166, 1886, 1896, 1425, 527, 732, 1581, 766, 947, 518, 1056, 239, 1200, 1767, 28, 1943, 1306, 1581, 1550, 828, 25, 1034, 435, 848, 1013, 1081, 1253, 1611, 1884, 1059, 1190, 9, 258, 1255, 1916, 81, 918, 692, 1167, 1884, 1848, 866, 1189, 1663, 1344, 1864, 1157, 1272, 1689, 61, 700, 521, 1943, 1087, 143, 1503, 1416, 1484, 689, 1428, 1325, 1210, 1665, 964, 1538, 199, 132, 388, 219, 116, 429, 445, 562, 357, 900, 255, 1231, 842, 979, 735, 946, 1143, 1603, 698, 316, 1429 };
	int h_arr[100] = {1517, 523, 1944, 82, 126, 1955, 1376, 483, 887, 1271, 28, 1258, 968, 1381, 830, 1833, 935, 1954, 682, 1901, 1866, 1628, 576, 120, 657, 1290, 524, 111, 1464, 1560, 1014, 1395, 1192, 768, 416, 1667, 1477, 1293, 829, 1443, 899, 889, 1476, 749, 1184, 1740, 1965, 1447, 712, 966, 1750, 535, 1283, 1377, 1971, 952, 505, 363, 772, 53, 467, 534, 408, 1957, 1514, 601, 341, 563, 859, 857, 850, 710, 1018, 444, 1408, 1610, 253, 298, 1503, 939, 919, 1827, 800, 224, 1561, 450, 1814, 1909, 392, 1278, 1983, 1329, 1803, 1631, 952, 1585, 1900, 403, 1747, 118};
	//int h_arr[40] = { 1397, 1986, 1835, 23, 128, 1119, 26, 1661, 1659, 1482, 1854, 133, 46, 869, 151, 1362, 160, 175, 1211, 1926, 1092, 720, 1708, 1693, 1522, 1387, 390, 852, 1154, 1264, 865, 1842, 1600, 302, 1229, 748, 676, 1476, 1721, 349 };
	//int h_arr[60] = { 1311, 1495, 1157, 1665, 506, 534, 863, 250, 1903, 1225, 917, 280, 1077, 1900, 160, 1188, 186, 1425, 381, 456, 1461, 425, 483, 1017, 444, 250, 1365, 906, 1093, 956, 1586, 415, 1930, 1335, 419, 754, 1056, 103, 1651, 670, 1564, 403, 534, 1200, 1272, 1029, 1322, 1203, 732, 1566, 1041, 1002, 1084, 426, 1037, 1402, 20, 1558, 351, 1826 };




	int n = sizeof(h_arr) / sizeof(unsigned int);   //Size of input array
	unsigned int* h_compact = new unsigned int[n];


	//------------------------------------Create d_arr[], d_compact_0[], d_compact_1[], d_temp_out[]------------------------------------------ 
	unsigned int* d_compact_0, *d_arr, *d_compact_1, *d_temp_out;
	//d_temp_out[] is temporary array used to temporarily store sorted output in kernel

	cudaMalloc((void**) &d_arr, n * sizeof(unsigned int));   //Allocate compact_0 array [] in GPU for n elements
	cudaMemcpy((void*) d_arr, (void*) h_arr, n * sizeof(unsigned int), cudaMemcpyHostToDevice);

	cudaMalloc((void**) &d_compact_0, n * sizeof(unsigned int));   //Allocate compact_0 array [] in GPU for n elements
	cudaMalloc((void**) &d_compact_1, n * sizeof(unsigned int));
	cudaMalloc((void**) &d_temp_out, n * sizeof(unsigned int));   //Allocate compact_0 array [] in GPU for n elements



	//-------------------------------------------------Create Scan Arrays in Host--------------------------------------------------
		//n+1 because we need 1 extra element to hold scan of arr[i+1]
	unsigned int* h_scan_0 = new unsigned int [n+1];
	unsigned int* h_scan_1 = new unsigned int [n+1];
	

	//-------------------------------------------------Create Scan Arrays in Device--------------------------------------------------
	unsigned int* d_scan_0;   //For bit-0
	cudaMalloc((void**) &d_scan_0, (n+1) * sizeof(unsigned int));   //Allocate compact_0 array [] in GPU for n+1 elements

	unsigned int* d_scan_1;   //For bit-1
	cudaMalloc((void**) &d_scan_1, (n+1) * sizeof(unsigned int));


	GpuTimer timer;
	timer.Start();
	
	// ---------------------------Iterate 32 times (1 time for each bit of integer) and Make Kernel Call-------------------------
	int bit_no;
	for (bit_no = 0; bit_no < 32; bit_no++)
	{
		compacter <<< 1, n >>> (d_arr, d_compact_0, d_compact_1, bit_no);     //Launch kernel : 1 block of n threads


	    //Produce scan arrays
		sum_scan_blelloch(d_scan_0, d_compact_0, n+1);     //Calculate scan_0[] using Blelloch Scan Technique
		scan_1_calculator <<< 1, (n+1) >>> (d_scan_1, d_scan_0, n);    //calculate scan_1[] using scan_0[]

		
		//Produce bit-0 sort
		scatter_sort <<< 1, n >>> ( d_arr, d_scan_0, d_scan_1, d_compact_0, n, d_temp_out);

	}


	timer.Stop();
	double time_elapsed = timer.Elapsed();

	//--------------------------------Copy output to CPU h_out[] and print sorted array-----------------------------------------------------------
	unsigned int* h_out = new unsigned int[n];
	cudaMemcpy((void*) h_out, (void*) d_arr, (n) * sizeof(unsigned int), cudaMemcpyDeviceToHost);
	for (int i = 0; i < n; i++)
	{
		printf("%d ", h_out[i]);
	}

	printf("\n\n Time Elapsed : %g ms", time_elapsed);

	/*
	//Copy output
	cudaMemcpy((void*)h_scan_0, (void*)d_scan_0, 9 * sizeof(unsigned int), cudaMemcpyDeviceToHost);
	cudaMemcpy((void*)h_scan_1, (void*)d_scan_1, 9 * sizeof(unsigned int), cudaMemcpyDeviceToHost);


	for (int i = 0; i < 9; i++)
	{
		printf("%d ", h_scan_0[i]);
	}
	printf("\n");

	for (int i = 0; i < 9; i++)
	{
		printf("%d ", h_scan_1[i]);
	}
	*/
}


void main()
{
	radix_sort();
}
